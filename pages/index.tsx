import Head from 'next/head'
import Image from 'next/image'
import { League_Spartan } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { Box, Center, Flex, VStack, Text, Circle, Grid, GridItem } from '@chakra-ui/react'
import { useState } from 'react'

const league = League_Spartan({weight:'700', subsets: ['latin'] })

const Tombol = ({value, rows, cols, bg, click}:{value:string, rows:number, cols:number, bg:string, click:()=>void}) =>{
  const clr = bg=="biru.keyBgGrey" ? "biru.textBlue" : "biru.white";
  const shadow = bg.replace("Bg", "Shadow")
  const fs = bg=="biru.keyBgGrey" ? "32px" : "25px";
  return <GridItem as="button" bg={bg} color={clr} colSpan={cols} rowSpan={rows} 
          boxShadow={shadow} borderRadius="5px" fontSize={fs}
          onClick={click}>
    <Text mb="-5px">{value}</Text>
  </GridItem>
}

export default function Home() {
  const [display, setDisplay] = useState('');
  const [opr, setOpr] = useState('');
  const [kalian, setKalian] = useState('');
  function handleNum(x:string){
    // const onlyNum = display.replaceAll(",", "")
    // const koma = (onlyNum.length%3 == 0 && onlyNum.length > 0 && !onlyNum.includes(".")) ? ",":"";
    // const temp = (display+x).slice(0, (display+x).length -3)+koma+(display+x).slice(-3)
    setDisplay(display+x);
  }
  function handleOp(op:string){
    setDisplay(display+op)
    if(op == '+' || op == '-'){
      setOpr(opr+op)
    }else{
      setKalian(kalian+op)
    }
    
  }
  function doDelete(){
    const last = display.charAt(display.length-1)
    if(last.includes('x') || last.includes('/') || last.includes('+') || last.includes('-')){
      setOpr(opr.slice(0, opr.length-1))  
    }
    setDisplay(display.slice(0, display.length-1))
  }
  function doReset(){
    setDisplay('')
    setOpr('')
    setKalian('')
  }
  function calc(){
    
    const addition = display.split(/[+-]/)
    console.log(addition)
    // const plusminus = display.split(/[^+-]/)
    // console.log(plusminus)
    addition.forEach((val,idx)=>{
      if(val.includes('x') || val.includes('/')){
        const angka = val.split(/[x\/]/)
        console.log('angka'+angka)
        const mult = kalian.split('')
        console.log(mult)
        let total:number = parseFloat(angka[0])

        mult.forEach((v,i)=>{
          if(v == 'x'){
            total*=parseFloat(angka[i+1])
          }else if(v == '/'){
            total/=parseFloat(angka[i+1])
          }
        })
        addition[idx] = total.toString();
      }
    })
    console.log(addition)
    let semua = parseFloat(addition[0])
    console.log(semua)
    const plusminus = opr.split('')
    console.log(plusminus)
    plusminus.forEach((val,idx) =>{
      if(val == '+'){
        semua+=parseFloat(addition[idx+1])
      }else if(val == '-'){
        semua-=parseFloat(addition[idx+1])
      }
    })
    console.log(semua)
    setDisplay(semua.toString())
    setOpr('')
    setKalian('')
  }
  return (
    <>
      <Head>
        <title>Calculator App</title>
        <meta name="description" content="Generated by Nida Nido" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/favicon-32x32.png" />
      </Head>
      <main className={league.className}>
        <Flex w={{base:'100%', sm:'100vw'}} h={{base:"100%", sm:'100vh'}} minH="100vh"
              flexFlow="column nowrap" justifyContent="center" alignItems="center"
              bg="biru.mainBg"
        >
          <VStack spacing="10px" w="90%" maxW="400px">
            <Flex justifyContent="space-between" color="biru.white" w="100%">
              <Text>calc</Text>
              <Flex>
                <Text>THEME</Text>
                <Box w="50px" h="20px" borderRadius={50} bg="biru.keypadBg">
                  <Circle size="15px" bg="biru.keyBgRed"></Circle>
                </Box>
              </Flex>
            </Flex>
            <Box h="80px" w="100%" bg="biru.screenBg" 
                  p="20px" textAlign="right" borderRadius="10px" >
              <Text color="biru.white" fontSize="40px">{display}</Text>
            </Box>
            <Grid templateRows="repeat(5, 1fr)" templateColumns="repeat(4, 1fr)"
                  gap="15px" w="100%" fontSize="32px" p="20px" bg="biru.keypadBg"
                  borderRadius="10px">
              <Tombol click={()=>handleNum("7")} value="7" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("8")} value="8" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("9")} value="9" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>doDelete()} value="DEL" rows={1} cols={1} bg="biru.keyBgBlue" />
              <Tombol click={()=>handleNum("4")} value="4" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("5")} value="5" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("6")} value="6" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleOp("+")} value="+" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("1")} value="1" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("2")} value="2" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("3")} value="3" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleOp("-")} value="-" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum(".")} value="." rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleNum("0")} value="0" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleOp("/")} value="/" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>handleOp("x")} value="x" rows={1} cols={1} bg="biru.keyBgGrey" />
              <Tombol click={()=>doReset()} value="RESET" rows={1} cols={2} bg="biru.keyBgBlue" />
              <Tombol click={()=>calc()} value="=" rows={1} cols={2} bg="biru.keyBgRed" />
            </Grid>
          </VStack>
        </Flex>
      </main>
    </>
  )
}
